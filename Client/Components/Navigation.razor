@using KitjiStudios.Client.Services
@implements IDisposable
@inject INavigationService NavigationService
@inject IJSRuntime JSRuntime

<nav class="navbar @(isScrolled ? "scrolled" : "not-scrolled")">
    <div class="container mx-auto px-4 sm:px-6 lg:px-8">
        <div class="flex items-center justify-between h-16">
            <!-- Logo -->
            <div class="flex items-center">
                <a href="/" class="flex items-center space-x-2" @onclick="() => NavigateToHome()">
                    <Logo />
                    <span class="text-xl font-bold text-white">Kitji Studios</span>
                </a>
            </div>

            <!-- Desktop Navigation -->
            <div class="hidden md:block">
                <div class="ml-10 flex items-baseline space-x-4">
                    @foreach (var link in navLinks)
                    {
                        <a href="@link.Href" 
                           class="nav-link @(IsCurrentPage(link.Href) ? "active" : "")"
                           @onclick="() => HandleNavClick(link)">
                            @link.Label
                        </a>
                    }
                </div>
            </div>

            <!-- Mobile menu button -->
            <div class="md:hidden">
                <button @onclick="ToggleMobileMenu" class="mobile-menu-btn">
                    <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                              d="M4 6h16M4 12h16M4 18h16" />
                    </svg>
                </button>
            </div>
        </div>

        <!-- Mobile menu -->
        @if (isMobileMenuOpen)
        {
            <div class="md:hidden">
                <div class="px-2 pt-2 pb-3 space-y-1 sm:px-3 bg-black/95 rounded-lg mt-2">
                    @foreach (var link in navLinks)
                    {
                        <a href="@link.Href" 
                           class="mobile-nav-link @(IsCurrentPage(link.Href) ? "active" : "")"
                           @onclick="() => HandleNavClick(link)">
                            @link.Label
                        </a>
                    }
                </div>
            </div>
        }
    </div>
</nav>

@code {
    private bool isScrolled = false;
    private bool isMobileMenuOpen = false;
    private string currentPath = "/";

    private readonly List<NavLink> navLinks = new()
    {
        new NavLink { Href = "/about", Label = "About", IsRoute = true },
        new NavLink { Href = "/services", Label = "Services", IsRoute = true },
        new NavLink { Href = "/products", Label = "Products", IsRoute = true },
        new NavLink { Href = "/team", Label = "Team", IsRoute = true },
        new NavLink { Href = "/work", Label = "Work", IsRoute = true }
    };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("addEventListener", "scroll", 
                DotNetObjectReference.Create(this), "HandleScroll");
            currentPath = NavigationService.GetCurrentPath();
        }
    }

    [JSInvokable]
    public async Task HandleScroll()
    {
        var scrollY = await JSRuntime.InvokeAsync<double>("window.pageYOffset");
        var newIsScrolled = scrollY > 50;
        
        if (newIsScrolled != isScrolled)
        {
            isScrolled = newIsScrolled;
            StateHasChanged();
        }
    }

    private void HandleNavClick(NavLink link)
    {
        if (link.IsRoute)
        {
            NavigationService.NavigateTo(link.Href);
            currentPath = link.Href;
        }
        else
        {
            if (currentPath != "/")
            {
                NavigationService.NavigateTo("/");
                // Use JS to scroll after navigation
                _ = Task.Run(async () =>
                {
                    await Task.Delay(100);
                    await JSRuntime.InvokeVoidAsync("scrollAnimations.scrollToElement", link.Href);
                });
            }
            else
            {
                _ = JSRuntime.InvokeVoidAsync("scrollAnimations.scrollToElement", link.Href);
            }
        }
        
        isMobileMenuOpen = false;
    }

    private void NavigateToHome()
    {
        NavigationService.NavigateTo("/");
        currentPath = "/";
        isMobileMenuOpen = false;
    }

    private void ToggleMobileMenu()
    {
        isMobileMenuOpen = !isMobileMenuOpen;
    }

    private bool IsCurrentPage(string href)
    {
        return currentPath == href;
    }

    public void Dispose()
    {
        // Cleanup if needed
    }

    private class NavLink
    {
        public string Href { get; set; } = "";
        public string Label { get; set; } = "";
        public bool IsRoute { get; set; } = true;
    }
}

<style>
    .container { max-width: 1200px; margin: 0 auto; }
    .mx-auto { margin-left: auto; margin-right: auto; }
    .px-4 { padding-left: 1rem; padding-right: 1rem; }
    .px-6 { padding-left: 1.5rem; padding-right: 1.5rem; }
    .px-8 { padding-left: 2rem; padding-right: 2rem; }
    .flex { display: flex; }
    .items-center { align-items: center; }
    .justify-between { justify-content: space-between; }
    .h-16 { height: 4rem; }
    .space-x-2 > * + * { margin-left: 0.5rem; }
    .space-x-4 > * + * { margin-left: 1rem; }
    .text-xl { font-size: 1.25rem; }
    .font-bold { font-weight: 700; }
    .text-white { color: white; }
    .hidden { display: none; }
    .ml-10 { margin-left: 2.5rem; }
    .h-6 { height: 1.5rem; }
    .w-6 { width: 1.5rem; }
    .px-2 { padding-left: 0.5rem; padding-right: 0.5rem; }
    .pt-2 { padding-top: 0.5rem; }
    .pb-3 { padding-bottom: 0.75rem; }
    .space-y-1 > * + * { margin-top: 0.25rem; }
    .px-3 { padding-left: 0.75rem; padding-right: 0.75rem; }
    .rounded-lg { border-radius: 0.5rem; }
    .mt-2 { margin-top: 0.5rem; }

    @media (min-width: 768px) {
        .md\\:block { display: block; }
        .md\\:hidden { display: none; }
    }

    .nav-link {
        color: rgba(255, 255, 255, 0.8);
        text-decoration: none;
        padding: 0.5rem 1rem;
        border-radius: 0.375rem;
        transition: all 0.2s;
        font-weight: 500;
    }

    .nav-link:hover, .nav-link.active {
        color: white;
        background: rgba(59, 130, 246, 0.1);
    }

    .mobile-nav-link {
        display: block;
        color: rgba(255, 255, 255, 0.8);
        text-decoration: none;
        padding: 0.75rem 1rem;
        border-radius: 0.375rem;
        transition: all 0.2s;
    }

    .mobile-nav-link:hover, .mobile-nav-link.active {
        color: white;
        background: rgba(59, 130, 246, 0.2);
    }

    .mobile-menu-btn {
        color: white;
        background: none;
        border: none;
        cursor: pointer;
        padding: 0.5rem;
        border-radius: 0.375rem;
        transition: background 0.2s;
    }

    .mobile-menu-btn:hover {
        background: rgba(255, 255, 255, 0.1);
    }
</style>